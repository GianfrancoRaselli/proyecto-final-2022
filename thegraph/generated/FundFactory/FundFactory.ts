// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewFund extends ethereum.Event {
  get params(): NewFund__Params {
    return new NewFund__Params(this);
  }
}

export class NewFund__Params {
  _event: NewFund;

  constructor(event: NewFund) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }

  get description(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class FundFactory extends ethereum.SmartContract {
  static bind(address: Address): FundFactory {
    return new FundFactory("FundFactory", address);
  }

  deployedFunds(param0: BigInt): Address {
    let result = super.call(
      "deployedFunds",
      "deployedFunds(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_deployedFunds(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployedFunds",
      "deployedFunds(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDeployedFunds(): Array<Address> {
    let result = super.call(
      "getDeployedFunds",
      "getDeployedFunds():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getDeployedFunds(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getDeployedFunds",
      "getDeployedFunds():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getDeployedFundsCount(): BigInt {
    let result = super.call(
      "getDeployedFundsCount",
      "getDeployedFundsCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getDeployedFundsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDeployedFundsCount",
      "getDeployedFundsCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class CreateFundCall extends ethereum.Call {
  get inputs(): CreateFundCall__Inputs {
    return new CreateFundCall__Inputs(this);
  }

  get outputs(): CreateFundCall__Outputs {
    return new CreateFundCall__Outputs(this);
  }
}

export class CreateFundCall__Inputs {
  _call: CreateFundCall;

  constructor(call: CreateFundCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _description(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _managers(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _newManagersCanBeAdded(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get _managersCanTransferMoneyWithoutARequest(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get _onlyManagersCanCreateARequest(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get _onlyContributorsCanApproveARequest(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get _minimumContributionPercentageRequired(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _minimumApprovalsPercentageRequired(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class CreateFundCall__Outputs {
  _call: CreateFundCall;

  constructor(call: CreateFundCall) {
    this._call = call;
  }
}
